"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dedent";
exports.ids = ["vendor-chunks/dedent"];
exports.modules = {

/***/ "(rsc)/./node_modules/dedent/dist/dedent.js":
/*!********************************************!*\
  !*** ./node_modules/dedent/dist/dedent.js ***!
  \********************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nconst dedent = createDedent({});\nvar _default = exports[\"default\"] = dedent;\nfunction createDedent(options) {\n  dedent.withOptions = newOptions => createDedent({\n    ...options,\n    ...newOptions\n  });\n  return dedent;\n  function dedent(strings, ...values) {\n    const raw = typeof strings === \"string\" ? [strings] : strings.raw;\n    const {\n      escapeSpecialCharacters = Array.isArray(strings),\n      trimWhitespace = true\n    } = options;\n\n    // first, perform interpolation\n    let result = \"\";\n    for (let i = 0; i < raw.length; i++) {\n      let next = raw[i];\n      if (escapeSpecialCharacters) {\n        // handle escaped newlines, backticks, and interpolation characters\n        next = next.replace(/\\\\\\n[ \\t]*/g, \"\").replace(/\\\\`/g, \"`\").replace(/\\\\\\$/g, \"$\").replace(/\\\\\\{/g, \"{\");\n      }\n      result += next;\n      if (i < values.length) {\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        result += values[i];\n      }\n    }\n\n    // now strip indentation\n    const lines = result.split(\"\\n\");\n    let mindent = null;\n    for (const l of lines) {\n      const m = l.match(/^(\\s+)\\S+/);\n      if (m) {\n        const indent = m[1].length;\n        if (!mindent) {\n          // this is the first indented line\n          mindent = indent;\n        } else {\n          mindent = Math.min(mindent, indent);\n        }\n      }\n    }\n    if (mindent !== null) {\n      const m = mindent; // appease TypeScript\n      result = lines\n      // https://github.com/typescript-eslint/typescript-eslint/issues/7140\n      // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n      .map(l => l[0] === \" \" || l[0] === \"\\t\" ? l.slice(m) : l).join(\"\\n\");\n    }\n\n    // dedent eats leading and trailing whitespace too\n    if (trimWhitespace) {\n      result = result.trim();\n    }\n\n    // handle escaped newlines at the end to ensure they don't get stripped too\n    if (escapeSpecialCharacters) {\n      result = result.replace(/\\\\n/g, \"\\n\");\n    }\n    return result;\n  }\n}\nmodule.exports = exports.default;\nmodule.exports[\"default\"] = exports.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZGVkZW50L2Rpc3QvZGVkZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2YsOEJBQThCO0FBQzlCLGVBQWUsa0JBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQSx1R0FBdUcsTUFBTTtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXJlY2lwZS8uL25vZGVfbW9kdWxlcy9kZWRlbnQvZGlzdC9kZWRlbnQuanM/NzY5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmNvbnN0IGRlZGVudCA9IGNyZWF0ZURlZGVudCh7fSk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSBkZWRlbnQ7XG5mdW5jdGlvbiBjcmVhdGVEZWRlbnQob3B0aW9ucykge1xuICBkZWRlbnQud2l0aE9wdGlvbnMgPSBuZXdPcHRpb25zID0+IGNyZWF0ZURlZGVudCh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICAuLi5uZXdPcHRpb25zXG4gIH0pO1xuICByZXR1cm4gZGVkZW50O1xuICBmdW5jdGlvbiBkZWRlbnQoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gICAgY29uc3QgcmF3ID0gdHlwZW9mIHN0cmluZ3MgPT09IFwic3RyaW5nXCIgPyBbc3RyaW5nc10gOiBzdHJpbmdzLnJhdztcbiAgICBjb25zdCB7XG4gICAgICBlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyA9IEFycmF5LmlzQXJyYXkoc3RyaW5ncyksXG4gICAgICB0cmltV2hpdGVzcGFjZSA9IHRydWVcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIC8vIGZpcnN0LCBwZXJmb3JtIGludGVycG9sYXRpb25cbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5leHQgPSByYXdbaV07XG4gICAgICBpZiAoZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMpIHtcbiAgICAgICAgLy8gaGFuZGxlIGVzY2FwZWQgbmV3bGluZXMsIGJhY2t0aWNrcywgYW5kIGludGVycG9sYXRpb24gY2hhcmFjdGVyc1xuICAgICAgICBuZXh0ID0gbmV4dC5yZXBsYWNlKC9cXFxcXFxuWyBcXHRdKi9nLCBcIlwiKS5yZXBsYWNlKC9cXFxcYC9nLCBcImBcIikucmVwbGFjZSgvXFxcXFxcJC9nLCBcIiRcIikucmVwbGFjZSgvXFxcXFxcey9nLCBcIntcIik7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gbmV4dDtcbiAgICAgIGlmIChpIDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXBsdXMtb3BlcmFuZHNcbiAgICAgICAgcmVzdWx0ICs9IHZhbHVlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBub3cgc3RyaXAgaW5kZW50YXRpb25cbiAgICBjb25zdCBsaW5lcyA9IHJlc3VsdC5zcGxpdChcIlxcblwiKTtcbiAgICBsZXQgbWluZGVudCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBsIG9mIGxpbmVzKSB7XG4gICAgICBjb25zdCBtID0gbC5tYXRjaCgvXihcXHMrKVxcUysvKTtcbiAgICAgIGlmIChtKSB7XG4gICAgICAgIGNvbnN0IGluZGVudCA9IG1bMV0ubGVuZ3RoO1xuICAgICAgICBpZiAoIW1pbmRlbnQpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBmaXJzdCBpbmRlbnRlZCBsaW5lXG4gICAgICAgICAgbWluZGVudCA9IGluZGVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtaW5kZW50ID0gTWF0aC5taW4obWluZGVudCwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluZGVudCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgbSA9IG1pbmRlbnQ7IC8vIGFwcGVhc2UgVHlwZVNjcmlwdFxuICAgICAgcmVzdWx0ID0gbGluZXNcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBlc2NyaXB0LWVzbGludC90eXBlc2NyaXB0LWVzbGludC9pc3N1ZXMvNzE0MFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItc3RyaW5nLXN0YXJ0cy1lbmRzLXdpdGhcbiAgICAgIC5tYXAobCA9PiBsWzBdID09PSBcIiBcIiB8fCBsWzBdID09PSBcIlxcdFwiID8gbC5zbGljZShtKSA6IGwpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuXG4gICAgLy8gZGVkZW50IGVhdHMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSB0b29cbiAgICBpZiAodHJpbVdoaXRlc3BhY2UpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGVzY2FwZWQgbmV3bGluZXMgYXQgdGhlIGVuZCB0byBlbnN1cmUgdGhleSBkb24ndCBnZXQgc3RyaXBwZWQgdG9vXG4gICAgaWYgKGVzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvXFxcXG4vZywgXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dedent/dist/dedent.js\n");

/***/ })

};
;